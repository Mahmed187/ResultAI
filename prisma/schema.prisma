generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

// Core patient information
model Patient {
  id          String   @id @default(uuid())
  nhsNumber   String   @unique @map("nhs_number")
  name        String
  dateOfBirth DateTime @map("date_of_birth")
  gpName      String   @map("gp_name")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relationships - both reference patient.id for consistency
  letter      Letter?      // One-to-one: each patient has exactly one consolidated letter
  testResults TestResult[] // One-to-many: patient can have multiple test results
   
  @@map("patients")
}

// Single consolidated letter per patient
model Letter {
  id        String   @id @default(uuid())
  patientId String   @unique @map("patient_id") // Fixed: references patient.id, not nhs_number
  content   String   // Generated HTML letter content
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships - now both models reference patient.id consistently
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("letters")
}

// Individual test results with timestamps - UPDATED WITH SAMPLE ID

// Individual test results with timestamps - FIXED SCHEMA
model TestResult {
  id             String   @id @default(uuid())
  patientId      String   @map("patient_id")   
  sampleId       String   @map("sample_id")
  testName       String   @map("test_name")
  value          String
  unit           String?
  referenceRange String   @map("reference_range")
  status         TestStatus
  meaning        String   // AI-generated explanation
  analyzedAt     DateTime @default(now()) @map("analyzed_at")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Indexes for query optimization (keep these!)
  @@index([patientId])
  @@index([sampleId])
  @@index([patientId, analyzedAt])
  @@index([patientId, testName])

  @@map("test_results")
}


// Enums for type safety
enum TestStatus {
  NORMAL
  HIGH
  LOW
  CRITICAL
}